{"version":3,"sources":["components/square.jsx","components/board.jsx","helperFunctions.js/calculateWinner.js","components/App.js","reportWebVitals.js","index.js"],"names":["Square","className","style","this","props","should_highlight","backgroundColor","onClick","value","Component","Board","i","squares","winningSquares","includes","rendered_rows","r","row","c","push","renderSquare","calculateWinner","lines","length","a","b","winner","App","state","history","Array","fill","position","move_number","x_is_next","historyOrder","handleClick","slice","current","Math","floor","col","setState","concat","jumpTo","move","handleToggle","newOrder","JSON","parse","stringify","reverse","moves","map","step","desc","winnerInfo","status","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d03b826.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Square extends Component {\r\n   render() {\r\n      return (\r\n         <button\r\n            className=\"square\"\r\n            style={this.props.should_highlight ? { backgroundColor: \"lime\" } : {}}\r\n            onClick={() => {\r\n               this.props.onClick();\r\n            }}\r\n         >\r\n            {this.props.value}\r\n         </button>\r\n      );\r\n   }\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./square\";\r\n\r\nclass Board extends Component {\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        key={i}\r\n        value={this.props.squares[i]}\r\n        onClick={() => {\r\n          this.props.onClick(i);\r\n        }}\r\n        should_highlight={\r\n          this.props.winningSquares === null ||\r\n          !this.props.winningSquares.includes(i)\r\n            ? false\r\n            : true\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    let rendered_rows = []; // array of 3 rows\r\n\r\n    for (let r = 0; r < 3; r++) {\r\n      let row = [];\r\n      for (let c = 0; c < 3; c++) {\r\n        row.push(this.renderSquare(r * 3 + c));\r\n      }\r\n\r\n      rendered_rows.push(\r\n        <div key={r} className=\"board-row\">\r\n          {row}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return rendered_rows;\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","function calculateWinner(squares) {\r\n  const lines = [\r\n    // 8 possible ways to win\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      const winningSquares = [a, b, c];\r\n      return { winner: squares[a], winningSquares: winningSquares };\r\n    }\r\n  }\r\n\r\n  return {winner: null, winningSquares: null};\r\n}\r\n\r\nexport default calculateWinner;\r\n","import React, { Component } from \"react\";\nimport Board from \"./board\";\nimport calculateWinner from \"../helperFunctions.js/calculateWinner\";\n\n/*  cd path:\ncd C:\\Users\\Patri\\OneDrive\\Desktop\\Web Projects\\React Projects\\tic_tac_toe\n*/\n\nclass App extends Component {\n   state = {\n      // every object concated to this array is a new version of the board\n      history: [\n         {\n            squares: Array(9).fill(null), // how the board looked like\n            position: null, // what position was clicked\n            move_number: 0,\n         },\n      ],\n      x_is_next: true,\n      move_number: 0,\n      historyOrder: \"ascending\",\n   };\n\n   handleClick = (i) => {\n      // i is the position of the board that was clicked\n      const history = this.state.history.slice(0, this.state.move_number + 1);\n      const current = history[history.length - 1]; // current is an object (hash map)\n      const squares = [...current.squares];\n\n      if (calculateWinner(squares).winner != null || squares[i])\n         // if there's a winner or the current square has already been clicked\n         return;\n\n      squares[i] = this.state.x_is_next ? \"X\" : \"O\";\n      const position = {\n         row: Math.floor(i / 3) + 1,\n         col: (i % 3) + 1,\n      };\n\n      this.setState({\n         history: history.concat({\n            squares: squares,\n            position: position,\n            move_number: history.length,\n         }),\n         move_number: history.length,\n         x_is_next: !this.state.x_is_next,\n      });\n   };\n\n   jumpTo = (move) => {\n      this.setState({\n         move_number: move,\n         x_is_next: move % 2 === 0,\n      });\n   };\n\n   handleToggle = () => {\n      const newOrder =\n         this.state.historyOrder === \"ascending\" ? \"descending\" : \"ascending\";\n      this.setState({\n         historyOrder: newOrder,\n      });\n   };\n\n   render() {\n      const history =\n         this.state.historyOrder === \"ascending\"\n            ? this.state.history\n            : JSON.parse(JSON.stringify(this.state.history)).reverse();\n      const current = this.state.history[this.state.move_number]; // current may change if the user jumps to part of the history\n\n      const moves = history.map((step, move) => {\n         const desc =\n            step.move_number === 0\n               ? \"Go to game start\"\n               : \"Go to move #\" +\n                 step.move_number +\n                 \": \" +\n                 (step.move_number % 2 === 0 ? \"O\" : \"X\") +\n                 \" at row \" +\n                 step.position.row +\n                 \", col \" +\n                 step.position.col;\n         return (\n            <li key={move}>\n               <button\n                  onClick={() => {\n                     this.jumpTo(step.move_number);\n                  }}\n               >\n                  {desc}\n               </button>\n            </li>\n         );\n      });\n\n      const winnerInfo = calculateWinner(current.squares);\n      let status = winnerInfo.winner\n         ? \"Winner: \" + winnerInfo.winner\n         : this.state.move_number === 9\n         ? \"Draw\"\n         : \"Next player: \" + (this.state.x_is_next ? \"X\" : \"O\");\n\n      return (\n         <>\n            <div className=\"title\">React Tic-Tac-Toe</div>\n            <div className=\"game\">\n               <div className=\"game-board\">\n                  <Board\n                     winningSquares={winnerInfo.winningSquares}\n                     squares={current.squares}\n                     onClick={(i) => this.handleClick(i)}\n                  />\n               </div>\n               <div className=\"game-info\">\n                  <div>{status}</div>\n                  <p>Current history order: {this.state.historyOrder}</p>\n                  <button onClick={this.handleToggle} className=\"toggle-btn\">\n                     Toggle History Order\n                  </button>\n                  <ol>{moves}</ol>\n               </div>\n            </div>\n         </>\n      );\n   }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}